{"ast":null,"code":"var _jsxFileName = \"/Users/wanghley/Workspace/Projects/wanghley.com/src/components/SkillsRadarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Chart as ChartJS, RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend } from \"chart.js\";\nimport { Radar } from \"react-chartjs-2\";\nimport { getUniqueElements } from \"../api/skills\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend);\nconst SKillRadarChart = () => {\n  _s();\n  const [uniqueElements, setUniqueElements] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getUniqueElements();\n        setUniqueElements(data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        // Handle the error as needed\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array to trigger the effect only once\n  console.log(uniqueElements);\n  if (!uniqueElements) return null;\n\n  // Convert the object back to an array\n  const uniqueArray = Object.keys(uniqueElements).map(id => ({\n    id: parseInt(id),\n    // Ensure id is parsed as an integer\n    attributes: uniqueElements[id]\n  }));\n\n  // Now uniqueArray contains only unique elements based on the \"id\" property\n  // console.log(uniqueArray);\n\n  // Map proficiency levels to numerical values\n  const proficiencyMapping = {\n    \"Basic\": 1,\n    \"Intermediate\": 2,\n    \"Advanced\": 3,\n    \"Proficient\": 4 // Note: Correct the typo in the dataset\n  };\n\n  // Iterate over the chart data\n  const countsByTypeAndProficiency = {};\n  // Iterate over the chart data\n  // console.log(chart)\n\n  // iterate over each element on the chart\n  // console.log(chart)\n  uniqueArray.forEach(element => {\n    const type = element.attributes.Type;\n    const proficiency = element.attributes.Expertise;\n    if (!countsByTypeAndProficiency[type]) {\n      countsByTypeAndProficiency[type] = {};\n    }\n    if (countsByTypeAndProficiency[type][proficiency] === undefined) {\n      countsByTypeAndProficiency[type][proficiency] = 1;\n    } else {\n      countsByTypeAndProficiency[type][proficiency] += 1;\n    }\n  });\n  const proficiencyPercentagesByType = {};\n  Object.keys(countsByTypeAndProficiency).forEach(type => {\n    const proficiencyCounts = countsByTypeAndProficiency[type];\n    let total = 0;\n    let sumProficiencyValues = 0;\n    Object.keys(proficiencyCounts).forEach(proficiency => {\n      const count = proficiencyCounts[proficiency];\n      const proficiencyValue = proficiencyMapping[proficiency];\n      total += count;\n      sumProficiencyValues += count * proficiencyValue;\n    });\n    // console log the total and sumProficiencyValues and object key in the same line\n    // console.log(total, sumProficiencyValues, type)\n    const averageProficiency = total !== 0 ? sumProficiencyValues / total : 0;\n    // normalize the average proficiency to a scale of 0 to 100\n    const normalizedAverageProficiency = Math.round(averageProficiency * 100 / 4);\n    proficiencyPercentagesByType[type] = normalizedAverageProficiency;\n  });\n  var data = {\n    labels: Object.keys(proficiencyPercentagesByType),\n    datasets: [{\n      data: Object.values(proficiencyPercentagesByType),\n      backgroundColor: 'rgba(58, 175, 241, 0.3)',\n      borderColor: 'rgba(58, 175, 241, 1)',\n      borderWidth: 2,\n      pointRadius: 5,\n      pointBackgroundColor: 'rgba(58, 175, 241, 1)'\n    }]\n  };\n  var options = {\n    plugins: {\n      legend: {\n        display: false\n      }\n    },\n    scale: {\n      angleLines: {\n        display: true,\n        color: 'rgba(0, 0, 0, 0.1)'\n      },\n      pointLabels: {\n        fontSize: 16,\n        fontColor: '#666',\n        fontStyle: 'bold'\n      },\n      ticks: {\n        beginAtZero: false,\n        stepSize: 25\n      },\n      circular: true // Set circular to true to make it a circular radar chart\n    },\n    responsive: true,\n    maintainAspectRatio: true\n  };\n\n  // change Radar chartjs canvas size\n  // const canvasRef = useRef(null);\n  // useEffect(() => {\n  //     const canvas = canvasRef.current;\n  //     const ctx = canvas.getContext(\"2d\");\n  //     ctx.canvas.width = 400;\n  //     ctx.canvas.height = 400;\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Radar, {\n      style: {\n        width: '98%',\n        margin: '0 auto'\n      },\n      data: data,\n      options: options\n      // use maximum width and height of the canvas to maintain aspect ratio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n};\n_s(SKillRadarChart, \"RjURS4M2KZflvD3u1MXrfNt1/AU=\");\n_c = SKillRadarChart;\nexport default SKillRadarChart;\nvar _c;\n$RefreshReg$(_c, \"SKillRadarChart\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chart","ChartJS","RadialLinearScale","PointElement","LineElement","Filler","Tooltip","Legend","Radar","getUniqueElements","jsxDEV","_jsxDEV","register","SKillRadarChart","_s","uniqueElements","setUniqueElements","fetchData","data","error","console","log","uniqueArray","Object","keys","map","id","parseInt","attributes","proficiencyMapping","countsByTypeAndProficiency","forEach","element","type","Type","proficiency","Expertise","undefined","proficiencyPercentagesByType","proficiencyCounts","total","sumProficiencyValues","count","proficiencyValue","averageProficiency","normalizedAverageProficiency","Math","round","labels","datasets","values","backgroundColor","borderColor","borderWidth","pointRadius","pointBackgroundColor","options","plugins","legend","display","scale","angleLines","color","pointLabels","fontSize","fontColor","fontStyle","ticks","beginAtZero","stepSize","circular","responsive","maintainAspectRatio","children","style","width","margin","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wanghley/Workspace/Projects/wanghley.com/src/components/SkillsRadarChart.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n    Chart as ChartJS,\n    RadialLinearScale,\n    PointElement,\n    LineElement,\n    Filler,\n    Tooltip,\n    Legend,\n} from \"chart.js\";\nimport { Radar } from \"react-chartjs-2\";\nimport {getUniqueElements} from \"../api/skills\";\n\nChartJS.register(\n    RadialLinearScale,\n    PointElement,\n    LineElement,\n    Filler,\n    Tooltip,\n    Legend\n);\n\nconst SKillRadarChart = () => {\n    \n    const [uniqueElements, setUniqueElements] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getUniqueElements();\n        setUniqueElements(data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        // Handle the error as needed\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array to trigger the effect only once\n    console.log(uniqueElements)\n    if (!uniqueElements) return null;\n\n    // Convert the object back to an array\n    const uniqueArray = Object.keys(uniqueElements).map(id => ({\n        id: parseInt(id), // Ensure id is parsed as an integer\n        attributes: uniqueElements[id]\n    }));\n\n    // Now uniqueArray contains only unique elements based on the \"id\" property\n    // console.log(uniqueArray);\n\n\n    // Map proficiency levels to numerical values\n    const proficiencyMapping = {\n        \"Basic\": 1,\n        \"Intermediate\": 2,\n        \"Advanced\": 3,\n        \"Proficient\": 4,  // Note: Correct the typo in the dataset\n    };\n\n    // Iterate over the chart data\n    const countsByTypeAndProficiency = {};\n    // Iterate over the chart data\n    // console.log(chart)\n\n    // iterate over each element on the chart\n    // console.log(chart)\n    uniqueArray.forEach(element => {\n        const type = element.attributes.Type;\n        const proficiency = element.attributes.Expertise;\n\n        if (!countsByTypeAndProficiency[type]) {\n            countsByTypeAndProficiency[type] = {};\n        }\n        if (countsByTypeAndProficiency[type][proficiency] === undefined) {\n            countsByTypeAndProficiency[type][proficiency] = 1;\n        } else {\n            countsByTypeAndProficiency[type][proficiency] += 1;\n        }\n    });\n\n    const proficiencyPercentagesByType = {};\n    Object.keys(countsByTypeAndProficiency).forEach(type => {\n        const proficiencyCounts = countsByTypeAndProficiency[type];\n        let total = 0;\n        let sumProficiencyValues = 0;\n\n        Object.keys(proficiencyCounts).forEach(proficiency => {\n            const count = proficiencyCounts[proficiency];\n            const proficiencyValue = proficiencyMapping[proficiency];\n            total += count;\n            sumProficiencyValues += count * proficiencyValue;\n        });\n        // console log the total and sumProficiencyValues and object key in the same line\n        // console.log(total, sumProficiencyValues, type)\n        const averageProficiency = total !== 0 ? sumProficiencyValues / total : 0;\n        // normalize the average proficiency to a scale of 0 to 100\n        const normalizedAverageProficiency = Math.round(averageProficiency * 100 / 4);\n\n        proficiencyPercentagesByType[type] = normalizedAverageProficiency;\n    });\n\n    var data = {\n        labels: Object.keys(proficiencyPercentagesByType),\n        datasets: [{\n            data: Object.values(proficiencyPercentagesByType),\n            backgroundColor: 'rgba(58, 175, 241, 0.3)',\n            borderColor: 'rgba(58, 175, 241, 1)',\n            borderWidth: 2,\n            pointRadius: 5,\n            pointBackgroundColor: 'rgba(58, 175, 241, 1)',\n        }]\n    }\n\n    var options = {\n        plugins: {\n            legend: {\n                display: false,\n            }\n        },\n        scale: {\n            angleLines: {\n              display: true,\n              color: 'rgba(0, 0, 0, 0.1)'\n            },\n            pointLabels: {\n              fontSize: 16,\n              fontColor: '#666',\n                fontStyle: 'bold'\n            },\n            ticks: {\n              beginAtZero: false,\n              stepSize: 25\n            },\n            circular: true // Set circular to true to make it a circular radar chart\n          },\n          responsive: true,\n          maintainAspectRatio: true,\n    };\n\n    // change Radar chartjs canvas size\n    // const canvasRef = useRef(null);\n    // useEffect(() => {\n    //     const canvas = canvasRef.current;\n    //     const ctx = canvas.getContext(\"2d\");\n    //     ctx.canvas.width = 400;\n    //     ctx.canvas.height = 400;\n    // }, []);\n\n    return (\n        <div>\n            <Radar\n                style={{ width: '98%', margin: '0 auto' }}\n                data={data}\n                options={options}\n                // use maximum width and height of the canvas to maintain aspect ratio\n            />\n        </div>\n    )\n}\n\nexport default SKillRadarChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}