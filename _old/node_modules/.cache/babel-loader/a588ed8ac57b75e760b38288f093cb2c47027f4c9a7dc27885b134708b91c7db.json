{"ast":null,"code":"\"use client\";\n\nimport { IS_CHROME, IS_IOS, canGoogleCastSrc, IS_SERVER, loadScript } from './vidstack-C-WrcxmD.js';\nimport { listenEvent, peek } from './vidstack-CH225ns1.js';\nfunction getCastFrameworkURL() {\n  return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n  return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n  return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n  return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n  return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n  return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n  const contentId = getCastSessionMedia()?.media.contentId;\n  return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n  return {\n    language: \"en-US\",\n    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n    resumeSavedSession: true,\n    androidReceiverCompatible: true\n  };\n}\nfunction getCastErrorMessage(code) {\n  const defaultMessage = `Google Cast Error Code: ${code}`;\n  {\n    switch (code) {\n      case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n        return \"The API is not initialized.\";\n      case chrome.cast.ErrorCode.CANCEL:\n        return \"The operation was canceled by the user\";\n      case chrome.cast.ErrorCode.CHANNEL_ERROR:\n        return \"A channel to the receiver is not available.\";\n      case chrome.cast.ErrorCode.EXTENSION_MISSING:\n        return \"The Cast extension is not available.\";\n      case chrome.cast.ErrorCode.INVALID_PARAMETER:\n        return \"The parameters to the operation were not valid.\";\n      case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n        return \"No receiver was compatible with the session request.\";\n      case chrome.cast.ErrorCode.SESSION_ERROR:\n        return \"A session could not be created, or a session was invalid.\";\n      case chrome.cast.ErrorCode.TIMEOUT:\n        return \"The operation timed out.\";\n      default:\n        return defaultMessage;\n    }\n  }\n}\nfunction listenCastContextEvent(type, handler) {\n  return listenEvent(getCastContext(), type, handler);\n}\nclass GoogleCastLoader {\n  name = \"google-cast\";\n  target;\n  #player;\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  mediaType() {\n    return \"video\";\n  }\n  canPlay(src) {\n    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);\n  }\n  async prompt(ctx) {\n    let loadEvent, openEvent, errorEvent;\n    try {\n      loadEvent = await this.#loadCastFramework(ctx);\n      if (!this.#player) {\n        this.#player = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this.#player);\n      }\n      openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this.#notifyRemoteStateChange(ctx, \"connecting\", openEvent);\n      await this.#showPrompt(peek(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: getCastSession()?.getCastDevice().friendlyName\n      });\n      if (isCastConnected()) this.#notifyRemoteStateChange(ctx, \"connected\", openEvent);\n    } catch (code) {\n      const error = code instanceof Error ? code : this.#createError((code + \"\").toUpperCase(), \"Prompt failed.\");\n      errorEvent = ctx.player.createEvent(\"google-cast-prompt-error\", {\n        detail: error,\n        trigger: openEvent ?? loadEvent,\n        cancelable: true\n      });\n      ctx.player.dispatch(errorEvent);\n      this.#notifyRemoteStateChange(ctx, isCastConnected() ? \"connected\" : \"disconnected\", errorEvent);\n      throw error;\n    } finally {\n      ctx.player.dispatch(\"google-cast-prompt-close\", {\n        trigger: errorEvent ?? openEvent ?? loadEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (IS_SERVER) {\n      throw Error(\"[vidstack] can not load google cast provider server-side\");\n    }\n    if (!this.#player) {\n      throw Error(\"[vidstack] google cast player was not initialized\");\n    }\n    return new (await import('./vidstack-Dybq7b7g.js')).GoogleCastProvider(this.#player, ctx);\n  }\n  async #loadCastFramework(ctx) {\n    if (hasLoadedCastFramework()) return;\n    const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n    ctx.player.dispatch(loadStartEvent);\n    await loadScript(getCastFrameworkURL());\n    await customElements.whenDefined(\"google-cast-launcher\");\n    const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", {\n      trigger: loadStartEvent\n    });\n    ctx.player.dispatch(loadedEvent);\n    if (!isCastAvailable()) {\n      throw this.#createError(\"CAST_NOT_AVAILABLE\", \"Google Cast not available on this platform.\");\n    }\n    return loadedEvent;\n  }\n  async #showPrompt(options) {\n    this.#setOptions(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode) {\n      throw this.#createError(errorCode.toUpperCase(), getCastErrorMessage(errorCode));\n    }\n  }\n  #setOptions(options) {\n    this.cast?.setOptions({\n      ...getDefaultCastOptions(),\n      ...options\n    });\n  }\n  #notifyRemoteStateChange(ctx, state, trigger) {\n    const detail = {\n      type: \"google-cast\",\n      state\n    };\n    ctx.notify(\"remote-playback-change\", detail, trigger);\n  }\n  #createError(code, message) {\n    const error = Error(message);\n    error.code = code;\n    return error;\n  }\n}\nvar loader = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  GoogleCastLoader: GoogleCastLoader\n});\nexport { getCastContext, getCastErrorMessage, getCastSession, getCastSessionMedia, hasActiveCastSession, listenCastContextEvent, loader };","map":{"version":3,"names":["IS_CHROME","IS_IOS","canGoogleCastSrc","IS_SERVER","loadScript","listenEvent","peek","getCastFrameworkURL","hasLoadedCastFramework","window","cast","framework","isCastAvailable","chrome","isAvailable","isCastConnected","getCastContext","getCastState","CastState","CONNECTED","CastContext","getInstance","getCastSession","getCurrentSession","getCastSessionMedia","getSessionObj","media","hasActiveCastSession","src","contentId","getDefaultCastOptions","language","autoJoinPolicy","AutoJoinPolicy","ORIGIN_SCOPED","receiverApplicationId","DEFAULT_MEDIA_RECEIVER_APP_ID","resumeSavedSession","androidReceiverCompatible","getCastErrorMessage","code","defaultMessage","ErrorCode","API_NOT_INITIALIZED","CANCEL","CHANNEL_ERROR","EXTENSION_MISSING","INVALID_PARAMETER","RECEIVER_UNAVAILABLE","SESSION_ERROR","TIMEOUT","listenCastContextEvent","type","handler","GoogleCastLoader","name","target","player","mediaType","canPlay","prompt","ctx","loadEvent","openEvent","errorEvent","loadCastFramework","RemotePlayer","RemotePlayerController","createEvent","trigger","dispatchEvent","notifyRemoteStateChange","showPrompt","$props","googleCast","$state","remotePlaybackInfo","set","deviceName","getCastDevice","friendlyName","error","Error","createError","toUpperCase","detail","cancelable","dispatch","load","GoogleCastProvider","#loadCastFramework","loadStartEvent","customElements","whenDefined","loadedEvent","#showPrompt","options","setOptions","errorCode","requestSession","#setOptions","#notifyRemoteStateChange","state","notify","#createError","message","loader","Object","freeze","__proto__"],"sources":["/Users/wanghley/Workspace/Projects/wanghley.com/node_modules/@vidstack/react/dev/chunks/vidstack-C8ZxSSGF.js"],"sourcesContent":["\"use client\"\n\nimport { IS_CHROME, IS_IOS, canGoogleCastSrc, IS_SERVER, loadScript } from './vidstack-C-WrcxmD.js';\nimport { listenEvent, peek } from './vidstack-CH225ns1.js';\n\nfunction getCastFrameworkURL() {\n  return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n  return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n  return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n  return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n  return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n  return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n  const contentId = getCastSessionMedia()?.media.contentId;\n  return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n  return {\n    language: \"en-US\",\n    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n    resumeSavedSession: true,\n    androidReceiverCompatible: true\n  };\n}\nfunction getCastErrorMessage(code) {\n  const defaultMessage = `Google Cast Error Code: ${code}`;\n  {\n    switch (code) {\n      case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n        return \"The API is not initialized.\";\n      case chrome.cast.ErrorCode.CANCEL:\n        return \"The operation was canceled by the user\";\n      case chrome.cast.ErrorCode.CHANNEL_ERROR:\n        return \"A channel to the receiver is not available.\";\n      case chrome.cast.ErrorCode.EXTENSION_MISSING:\n        return \"The Cast extension is not available.\";\n      case chrome.cast.ErrorCode.INVALID_PARAMETER:\n        return \"The parameters to the operation were not valid.\";\n      case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n        return \"No receiver was compatible with the session request.\";\n      case chrome.cast.ErrorCode.SESSION_ERROR:\n        return \"A session could not be created, or a session was invalid.\";\n      case chrome.cast.ErrorCode.TIMEOUT:\n        return \"The operation timed out.\";\n      default:\n        return defaultMessage;\n    }\n  }\n}\nfunction listenCastContextEvent(type, handler) {\n  return listenEvent(getCastContext(), type, handler);\n}\n\nclass GoogleCastLoader {\n  name = \"google-cast\";\n  target;\n  #player;\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  mediaType() {\n    return \"video\";\n  }\n  canPlay(src) {\n    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);\n  }\n  async prompt(ctx) {\n    let loadEvent, openEvent, errorEvent;\n    try {\n      loadEvent = await this.#loadCastFramework(ctx);\n      if (!this.#player) {\n        this.#player = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this.#player);\n      }\n      openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this.#notifyRemoteStateChange(ctx, \"connecting\", openEvent);\n      await this.#showPrompt(peek(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: getCastSession()?.getCastDevice().friendlyName\n      });\n      if (isCastConnected()) this.#notifyRemoteStateChange(ctx, \"connected\", openEvent);\n    } catch (code) {\n      const error = code instanceof Error ? code : this.#createError(\n        (code + \"\").toUpperCase(),\n        \"Prompt failed.\"\n      );\n      errorEvent = ctx.player.createEvent(\"google-cast-prompt-error\", {\n        detail: error,\n        trigger: openEvent ?? loadEvent,\n        cancelable: true\n      });\n      ctx.player.dispatch(errorEvent);\n      this.#notifyRemoteStateChange(\n        ctx,\n        isCastConnected() ? \"connected\" : \"disconnected\",\n        errorEvent\n      );\n      throw error;\n    } finally {\n      ctx.player.dispatch(\"google-cast-prompt-close\", {\n        trigger: errorEvent ?? openEvent ?? loadEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (IS_SERVER) {\n      throw Error(\"[vidstack] can not load google cast provider server-side\");\n    }\n    if (!this.#player) {\n      throw Error(\"[vidstack] google cast player was not initialized\");\n    }\n    return new (await import('./vidstack-Dybq7b7g.js')).GoogleCastProvider(this.#player, ctx);\n  }\n  async #loadCastFramework(ctx) {\n    if (hasLoadedCastFramework()) return;\n    const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n    ctx.player.dispatch(loadStartEvent);\n    await loadScript(getCastFrameworkURL());\n    await customElements.whenDefined(\"google-cast-launcher\");\n    const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", { trigger: loadStartEvent });\n    ctx.player.dispatch(loadedEvent);\n    if (!isCastAvailable()) {\n      throw this.#createError(\"CAST_NOT_AVAILABLE\", \"Google Cast not available on this platform.\");\n    }\n    return loadedEvent;\n  }\n  async #showPrompt(options) {\n    this.#setOptions(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode) {\n      throw this.#createError(\n        errorCode.toUpperCase(),\n        getCastErrorMessage(errorCode)\n      );\n    }\n  }\n  #setOptions(options) {\n    this.cast?.setOptions({\n      ...getDefaultCastOptions(),\n      ...options\n    });\n  }\n  #notifyRemoteStateChange(ctx, state, trigger) {\n    const detail = { type: \"google-cast\", state };\n    ctx.notify(\"remote-playback-change\", detail, trigger);\n  }\n  #createError(code, message) {\n    const error = Error(message);\n    error.code = code;\n    return error;\n  }\n}\n\nvar loader = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  GoogleCastLoader: GoogleCastLoader\n});\n\nexport { getCastContext, getCastErrorMessage, getCastSession, getCastSessionMedia, hasActiveCastSession, listenCastContextEvent, loader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}